# This file defines the Windows Visual Studio PR build steps used during the CI loop
name: $(Date:yyyyMMdd).$(Rev:.r)

trigger: none # will disable CI builds entirely

pr: none # disable on PRs until stable

jobs:
  - job: UWPPR
    displayName: UWP PR
    strategy:
      matrix:
        X64Debug:
          BuildConfiguration: Debug
          BuildPlatform: x64
          UseRNFork: true
        X86Debug:
          BuildConfiguration: Debug
          BuildPlatform: x86
          UseRNFork: true
        ArmDebug:
          BuildConfiguration: Debug
          BuildPlatform: arm
          UseRNFork: true
        X64Release:
          BuildConfiguration: Release
          BuildPlatform: x64
          UseRNFork: true
        X86Release:
          BuildConfiguration: Release
          BuildPlatform: x86
          UseRNFork: true
        ArmRelease:
          BuildConfiguration: Release
          BuildPlatform: arm
          UseRNFork: true
        PublicRNX86Debug:
          BuildConfiguration: Debug
          BuildPlatform: x86
          UseRNFork: false
    pool:
      vmImage: vs2017-win2016
    timeoutInMinutes: 120 # how long to run the job before automatically cancelling
    cancelTimeoutInMinutes: 5 # how much time to give 'run always even if cancelled tasks' before killing them
    steps:
      - checkout: self # self represents the repo where the initial Pipelines YAML file was found
        clean: true # whether to fetch clean each time
        # fetchDepth: 2 # the depth of commits to ask Git to fetch
        lfs: false # whether to download Git-LFS files
        submodules: false # set to 'true' for a single level of submodules or 'recursive' to get submodules of submodules
        persistCredentials: false # set to 'true' to leave the OAuth token in the Git config after the initial fetch

      - task: CmdLine@2
        displayName: yarn install (Using microsoft/react-native)
        inputs:
          script: yarn install --frozen-lockfile
          workingDirectory: vnext
        condition: and(succeeded(), eq(variables['UseRNFork'], 'true'))

        # We can't use a frozen lockfile for both the fork and non-fork, since they install different dependencies
        # We don't want to force devs to update/create two lock files on every change, so just don't freeze when
        # using the non fork version.
      - task: CmdLine@2
        displayName: yarn install (Using facebook/react-native)
        inputs:
          script: yarn install
          workingDirectory: vnext
        env: { UseRNFork: 'false' }
        condition: and(succeeded(), eq(variables['UseRNFork'], 'false'))

      - template: templates/stop-packagers.yml

      - task: CmdLine@2
        displayName: yarn build
        inputs:
          script: yarn build
          workingDirectory: vnext

      - template: templates/install-SDK.yml
      
      - task: NuGetCommand@2
        displayName: NuGet restore - ReactWindows-UWP
        inputs:
          command: restore
          restoreSolution: vnext/ReactWindows-UWP.sln
          feedsToUse: config
          nugetConfigPath: vnext/NuGet.config
          restoreDirectory: packages/
          verbosityRestore: Detailed # Options: quiet, normal, detailed

      - task: MSBuild@1
        displayName: MSBuild - ReactWindows-UWP
        inputs:
          solution: vnext/ReactWindows-UWP.sln
          msbuildVersion: '15.0' # Optional. Options: latest, 16.0, 15.0, 14.0, 12.0, 4.0
          msbuildArchitecture: 'x64' # Optional. Options: x86, x64
          platform: $(BuildPlatform) # Optional
          configuration: $(BuildConfiguration) # Optional
          msbuildArguments: '/p:PreferredToolArchitecture=x64' # Optional
          clean: true # Optional

      - task: NuGetCommand@2
        displayName: NuGet restore - Playground
        inputs:
          command: restore
          restoreSolution: vnext/Playground/Playground.sln
          feedsToUse: config
          nugetConfigPath: vnext/NuGet.config
          restoreDirectory: packages/
          verbosityRestore: Detailed # Options: quiet, normal, detailed

      - task: MSBuild@1
        displayName: MSBuild - Playground
        inputs:
          solution: vnext/Playground/Playground.sln
          msbuildVersion: '15.0' # Optional. Options: latest, 16.0, 15.0, 14.0, 12.0, 4.0
          msbuildArchitecture: 'x64' # Optional. Options: x86, x64
          platform: $(BuildPlatform) # Optional
          configuration: $(BuildConfiguration) # Optional
          msbuildArguments: '/p:PreferredToolArchitecture=x64' # Optional
          clean: true # Optional

      - task: CmdLine@2
        displayName: Create SampleApp bundle
        inputs:
          script: node Scripts\cli.js bundle --entry-file .\Universal.SampleApp\index.uwp.js --bundle-output SampleApp.uwp.bundle --platform uwp
          workingDirectory: vnext

      - task: CmdLine@2
        displayName: Remove SampleApp.uwp.bundle
        inputs:
          script: del SampleApp.uwp.bundle
          workingDirectory: vnext

  - job: CliInit
    displayName: Verify react-native init
    pool:
      vmImage: vs2017-win2016
    timeoutInMinutes: 60 # how long to run the job before automatically cancelling
    cancelTimeoutInMinutes: 5 # how much time to give 'run always even if cancelled tasks' before killing them
    steps:
      - checkout: self # self represents the repo where the initial Pipelines YAML file was found
        clean: true # whether to fetch clean each time
        # fetchDepth: 2 # the depth of commits to ask Git to fetch
        lfs: false # whether to download Git-LFS files
        submodules: false # set to 'true' for a single level of submodules or 'recursive' to get submodules of submodules
        persistCredentials: false # set to 'true' to leave the OAuth token in the Git config after the initial fetch

      # First do a build of the local package, since we point the cli at the local files, it needs to be pre-built
      - task: CmdLine@2
        displayName: yarn install (local react-native-windows)
        inputs:
          script: yarn install --frozen-lockfile
          workingDirectory: vnext

      - task: CmdLine@2
        displayName: yarn build (local react-native-windows)
        inputs:
          script: yarn build
          workingDirectory: vnext

      # yarn ends up copying the whole node_modules folder when doing an install of a file package
      # Delete node_modules, so that resolution is more like when installing from a published npm package
      - task: CmdLine@2
        displayName: Remove node_modules
        inputs:
          script: rd /S /Q node_modules
          workingDirectory: vnext

      - task: CmdLine@2
        displayName: Install react-native cli
        inputs:
          script: npm install -g react-native-cli

      - task: CmdLine@2
        displayName: Init new project
        inputs:
          script: react-native init testcli
          workingDirectory: $(Agent.BuildDirectory)

      - task: CmdLine@2
        displayName: Install rnpm-plugin-windows
        inputs:
          script: yarn add rnpm-plugin-windows@file:$(Build.SourcesDirectory)\current\local-cli\rnpm\windows
          workingDirectory: $(Agent.BuildDirectory)\testcli
        
      - task: CmdLine@2
        displayName: Apply windows template
        inputs:
          script: react-native windows --template vnext --windowsVersion file:$(Build.SourcesDirectory)\vnext
          workingDirectory: $(Agent.BuildDirectory)\testcli

      - template: templates/install-SDK.yml

      - task: NuGetCommand@2
        displayName: NuGet restore
        inputs:
          command: restore
          restoreSolution: $(Agent.BuildDirectory)\testcli\windows\testcli.sln

      - task: MSBuild@1
        displayName: MSBuild - Build the project
        inputs:
          solution: $(Agent.BuildDirectory)\testcli\windows\testcli.sln
          msbuildVersion: '15.0' # Optional. Options: latest, 16.0, 15.0, 14.0, 12.0, 4.0
          msbuildArchitecture: 'x86' # Optional. Options: x86, x64
          platform: x64 # Optional
          configuration: Debug # Optional
          restoreNugetPackages: true
          msbuildArguments: '/p:PreferredToolArchitecture=x64' # Optional
          clean: true # Optional

      - task: CmdLine@2
        displayName: Create bundle
        inputs:
          script: react-native bundle --entry-file App.windows.js platform uwp --bundle-output test.bundle
          workingDirectory: $(Agent.BuildDirectory)\testcli

  - job: RnwNativePRBuild
    displayName: Windows Visual Studio with Win32 PR
    strategy:
      matrix:
        X64Debug:
          BuildConfiguration: Debug
          BuildPlatform: x64
        X86Debug:
          BuildConfiguration: Debug
          BuildPlatform: x86
        ArmDebug:
          BuildConfiguration: Debug
          BuildPlatform: arm
        X64Release:
          BuildConfiguration: Release
          BuildPlatform: x64
        X86Release:
          BuildConfiguration: Release
          BuildPlatform: x86
        ArmRelease:
          BuildConfiguration: Release
          BuildPlatform: arm
    pool:
      vmImage: vs2017-win2016
    timeoutInMinutes: 120 # how long to run the job before automatically cancelling
    cancelTimeoutInMinutes: 5 # how much time to give 'run always even if cancelled tasks' before killing them
    steps:
      - checkout: self # self represents the repo where the initial Pipelines YAML file was found
        clean: true # whether to fetch clean each time
        # fetchDepth: 2 # the depth of commits to ask Git to fetch
        lfs: false # whether to download Git-LFS files
        submodules: false # set to 'true' for a single level of submodules or 'recursive' to get submodules of submodules
        persistCredentials: false # set to 'true' to leave the OAuth token in the Git config after the initial fetch

      - task: CmdLine@2
        displayName: yarn install
        inputs:
          script: yarn install --frozen-lockfile
          workingDirectory: vnext

      - template: templates/stop-packagers.yml

      - task: CmdLine@2
        displayName: yarn build
        inputs:
          script: yarn build
          workingDirectory: vnext

      - template: templates/install-SDK.yml

      - template: templates/vs-build.yml
        parameters:
          BuildConfiguration: $(BuildConfiguration)
          BuildPlatform: $(BuildPlatform)

      - task: VSTest@2
        displayName: Run Desktop Unit Tests
        timeoutInMinutes: 5 # Set smaller timeout for UTs, since there have been some hangs, and this allows the job to timeout quicker
        condition: and(succeeded(), ne(variables['BuildPlatform'], 'ARM'))
        inputs:
          testSelector: 'testAssemblies' # Options: testAssemblies, testPlan, testRun
          testAssemblyVer2: 'React.Windows.Desktop.UnitTests\React.Windows.Desktop.UnitTests.dll' # Required when testSelector == TestAssemblies
          #testPlan: # Required when testSelector == TestPlan
          #testSuite: # Required when testSelector == TestPlan
          #testConfiguration: # Required when testSelector == TestPlan
          #tcmTestRun: '$(test.RunId)' # Optional
          searchFolder: '$(Build.SourcesDirectory)\vnext\target\$(BuildPlatform)\$(BuildConfiguration)'
          #testFiltercriteria: # Optional
          #runOnlyImpactedTests: False # Optional
          #runAllTestsAfterXBuilds: '50' # Optional
          #uiTests: false # Optional
          #vstestLocationMethod: 'version' # Optional. Options: version, location
          vsTestVersion: '15.0' # Optional. Options: latest, 15.0, 14.0, toolsInstaller
          #vstestLocation: # Optional
          runSettingsFile: $(Build.SourcesDirectory)\vnext\Desktop.UnitTests\tests.runsettings # Optional
          #overrideTestrunParameters: # Optional
          #pathtoCustomTestAdapters: # Optional
          #runInParallel: False # Optional
          runTestsInIsolation: true # Optional
          #codeCoverageEnabled: False # Optional
          #otherConsoleOptions: # Optional
          #distributionBatchType: 'basedOnTestCases' # Optional. Options: basedOnTestCases, basedOnExecutionTime, basedOnAssembly
          #batchingBasedOnAgentsOption: 'autoBatchSize' # Optional. Options: autoBatchSize, customBatchSize
          #customBatchSizeValue: '10' # Required when distributionBatchType == BasedOnTestCases && BatchingBasedOnAgentsOption == CustomBatchSize
          #batchingBasedOnExecutionTimeOption: 'autoBatchSize' # Optional. Options: autoBatchSize, customTimeBatchSize
          #customRunTimePerBatchValue: '60' # Required when distributionBatchType == BasedOnExecutionTime && BatchingBasedOnExecutionTimeOption == CustomTimeBatchSize
          #dontDistribute: False # Optional
          #testRunTitle: # Optional
          platform: $(BuildPlatform) # Optional
          configuration: $(BuildConfiguration) # Optional
          publishRunAttachments: true # Optional
          #diagnosticsEnabled: True # Optional
          collectDumpOn: 'onAbortOnly' # Optional. Options: onAbortOnly, always, never
          #rerunFailedTests: False # Optional
          #rerunType: 'basedOnTestFailurePercentage' # Optional. Options: basedOnTestFailurePercentage, basedOnTestFailureCount
          #rerunFailedThreshold: '30' # Optional
          #rerunFailedTestCasesMaxLimit: '5' # Optional
          #rerunMaxAttempts: '3' # Optional

      - task: PowerShell@2
        displayName: Set up test servers
        condition: and(succeeded(), ne(variables['BuildPlatform'], 'ARM'))
        inputs:
          targetType: filePath # filePath | inline
          filePath: $(Build.SourcesDirectory)\vnext\Scripts\Tfs\Start-TestServers.ps1
          arguments: -SourcesDirectory $(Build.SourcesDirectory)\vnext\node_modules\react-native -Preload

      - task: VSTest@2
        displayName: Run Desktop Integration Tests
        condition: and(succeeded(), ne(variables['BuildPlatform'], 'ARM'))
        inputs:
          testSelector: 'testAssemblies' # Options: testAssemblies, testPlan, testRun
          testAssemblyVer2: 'React.Windows.Desktop.IntegrationTests\React.Windows.Desktop.IntegrationTests.dll' # Required when testSelector == TestAssemblies
          #testPlan: # Required when testSelector == TestPlan
          #testSuite: # Required when testSelector == TestPlan
          #testConfiguration: # Required when testSelector == TestPlan
          #tcmTestRun: '$(test.RunId)' # Optional
          searchFolder: '$(Build.SourcesDirectory)\vnext\target\$(BuildPlatform)\$(BuildConfiguration)'
          testFiltercriteria: (FullyQualifiedName~RNTesterIntegrationTests)&(Owner!=Unstable)
          #runOnlyImpactedTests: False # Optional
          #runAllTestsAfterXBuilds: '50' # Optional
          #uiTests: false # Optional
          #vstestLocationMethod: 'version' # Optional. Options: version, location
          vsTestVersion: '15.0' # Optional. Options: latest, 15.0, 14.0, toolsInstaller
          #vstestLocation: # Optional
          #runSettingsFile: # Optional
          #overrideTestrunParameters: # Optional
          #pathtoCustomTestAdapters: # Optional
          #runInParallel: False # Optional
          runTestsInIsolation: true # Optional
          #codeCoverageEnabled: False # Optional
          #otherConsoleOptions: '--Tests:"RNTesterIntegrationTests"' # TODO re-add WebSocketModuleIntegrationTest  # Optional
          #distributionBatchType: 'basedOnTestCases' # Optional. Options: basedOnTestCases, basedOnExecutionTime, basedOnAssembly
          #batchingBasedOnAgentsOption: 'autoBatchSize' # Optional. Options: autoBatchSize, customBatchSize
          #customBatchSizeValue: '10' # Required when distributionBatchType == BasedOnTestCases && BatchingBasedOnAgentsOption == CustomBatchSize
          #batchingBasedOnExecutionTimeOption: 'autoBatchSize' # Optional. Options: autoBatchSize, customTimeBatchSize
          #customRunTimePerBatchValue: '60' # Required when distributionBatchType == BasedOnExecutionTime && BatchingBasedOnExecutionTimeOption == CustomTimeBatchSize
          #dontDistribute: False # Optional
          #testRunTitle: # Optional
          platform: $(BuildPlatform) # Optional
          configuration: $(BuildConfiguration) # Optional
          publishRunAttachments: true # Optional
          #diagnosticsEnabled: True # Optional
          collectDumpOn: 'onAbortOnly' # Optional. Options: onAbortOnly, always, never
          #rerunFailedTests: False # Optional
          #rerunType: 'basedOnTestFailurePercentage' # Optional. Options: basedOnTestFailurePercentage, basedOnTestFailureCount
          #rerunFailedThreshold: '30' # Optional
          #rerunFailedTestCasesMaxLimit: '5' # Optional
          #rerunMaxAttempts: '3' # Optional


      - template: templates/stop-packagers.yml

      - template: templates/publish-build-artifacts-for-nuget.yml


  - job: RNWNugetPR
    dependsOn: RnwNativePRBuild
    displayName: React-Native-Windows Build and Pack Nuget
    pool:
      vmImage: vs2017-win2016
    steps:
      - checkout: none #skip checking out the default repository resource

      # The commit tag in the nuspec requires that we use at least nuget 4.6
      - task: NuGetToolInstaller@0
        inputs:
          versionSpec: '>=4.6.0' 

      - template: templates/prep-and-pack-nuget.yml
