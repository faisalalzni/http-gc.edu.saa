// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>
<#
var types = new[]
{
    typeof(bool),
    typeof(Double),
    typeof(Guid),
    typeof(short),
    typeof(int),
    typeof(long),
    typeof(float),
    typeof(string),
    typeof(TimeSpan),
    typeof(ushort),
    typeof(uint),
    typeof(ulong),
};

var mappings = new Dictionary<Type, string>
{
    { typeof(byte), "UInt8" },
    { typeof(char), "Char16" },
    { typeof(DateTimeOffset), "DateTime" },
};

var others = new[]
{
    "Rect",
    "Point",
    "Size",
};

#>
using System;
using System.Windows;

namespace ReactNative.Tracing
{
    static partial class LoggingFieldsExtensions
    {
<#
foreach (var type in types)
{
#>
        public static NullLoggingActivityBuilder With(this NullLoggingActivityBuilder builder, string name, <#=type.Name#> value)
        {
            return builder;
        }

        public static NullLoggingActivityBuilder With(this NullLoggingActivityBuilder builder, string name, <#=type.Name#>[] value)
        {
            return builder;
        }

<#
}
#>
<#
foreach (var mapping in mappings)
{
#>
        public static NullLoggingActivityBuilder With(this NullLoggingActivityBuilder builder, string name, <#=mapping.Key.Name#> value)
        {
            return builder;
        }

        public static NullLoggingActivityBuilder With(this NullLoggingActivityBuilder builder, string name, <#=mapping.Key.Name#>[] value)
        {
            return builder;
        }

<#
}
#>
<#
foreach (var other in others)
{
#>
        public static NullLoggingActivityBuilder With(this NullLoggingActivityBuilder builder, string name, <#=other#> value)
        {
            return builder;
        }

        public static NullLoggingActivityBuilder With(this NullLoggingActivityBuilder builder, string name, <#=other#>[] value)
        {
            return builder;
        }

<#
}
#>
        public static IDisposable Start(this NullLoggingActivityBuilder builder)
        {
            return builder?.Create();
        }
    }
}
