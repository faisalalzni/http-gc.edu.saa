//
// This file is generated by GenericDelegateTypes.tt
//
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
//
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# const int maxArity = 16; #>
using System;
using System.Reflection;

namespace ReactNative.Bridge
{
    static class GenericDelegateTypes
    {
        public static Type[] ActionTypes =
        {
            typeof(SignatureAction0),
<#
for (var i = 1; i <= maxArity; ++i)
{
    var genericArgs = "<" + string.Join("", Enumerable.Repeat(",", i - 1)) + ">";
#>            typeof(SignatureAction<#=i#><#=genericArgs#>),
<#
}
#>
        };

        public static Type[] FuncTypes =
        {
<#
for (var i = 0; i <= maxArity; ++i)
{
    var genericArgs = "<" + string.Join("", Enumerable.Repeat(",", i)) + ">";
#>            typeof(SignatureFunc<#=i#><#=genericArgs#>),
<#
}
#>
        };
<#
for (var i = 0; i <= maxArity; ++i)
{
    var typeParams = Enumerable.Range(0, i).Select(x => "T" + x);
    var typeParamsString = string.Join(", ", typeParams);
    var argsString = string.Join(", ", typeParams.Select((x, idx) => $"({x})args[{idx}]"));

    var actionTypeParamsString = "";
    var funcTypeParamsString = typeParamsString;
    if (i > 0)
    {
        actionTypeParamsString = "<" + typeParamsString + ">";
        funcTypeParamsString = funcTypeParamsString + ", ";
    }
#>

        class SignatureAction<#=i#><#=actionTypeParamsString#> : IGenericDelegate
        {
            Action<#=actionTypeParamsString#> _instancedDelegate;

            public SignatureAction<#=i#>(MethodInfo method)
            {
                _instancedDelegate = (Action<#=actionTypeParamsString#>)method.CreateDelegate(typeof(Action<#=actionTypeParamsString#>));
            }

            public SignatureAction<#=i#>(object instance, MethodInfo method)
            {
                _instancedDelegate = (Action<#=actionTypeParamsString#>)method.CreateDelegate(typeof(Action<#=actionTypeParamsString#>), instance);
            }

            public object Invoke(object[] args)
            {
               _instancedDelegate(<#=argsString#>);
                return null;
            }
        }

        class SignatureFunc<#=i#><<#=funcTypeParamsString#>TResult> : IGenericDelegate
        {
            Func<<#=funcTypeParamsString#>TResult> _instancedDelegate;

            public SignatureFunc<#=i#>(MethodInfo method)
            {
                _instancedDelegate = (Func<<#=funcTypeParamsString#>TResult>)method.CreateDelegate(typeof(Func<<#=funcTypeParamsString#>TResult>));
            }

            public SignatureFunc<#=i#>(object instance, MethodInfo method)
            {
                _instancedDelegate = (Func<<#=funcTypeParamsString#>TResult>)method.CreateDelegate(typeof(Func<<#=funcTypeParamsString#>TResult>), instance);
            }

            public object Invoke(object[] args) =>
                _instancedDelegate(<#=argsString#>);
        }
<#
}
#>
    }
}
