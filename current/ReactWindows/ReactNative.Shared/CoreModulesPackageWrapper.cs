//
// This file is generated by ReactPackageGenerator.tt
//
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
//

using ReactNative.Bridge;
using ReactNative.Modules.Core;
using ReactNative.UIManager;
using System.Collections.Generic;

namespace ReactNative
{
    class CoreModulesPackageWrapper : IReactPackage
    {
        private readonly IReactPackage _reactPackage;

        public CoreModulesPackageWrapper(CoreModulesPackage reactPackage)
        {
            _reactPackage = reactPackage;
        }

        public IReadOnlyList<INativeModule> CreateNativeModules(ReactContext reactContext)
        {
            var nativeModules = _reactPackage.CreateNativeModules(reactContext);
            return new List<INativeModule>
            {
                new DeviceEventManagerModuleWrapper((ReactNative.Modules.Core.DeviceEventManagerModule)nativeModules[0]),
                new DeviceInfoModuleWrapper((ReactNative.Modules.DeviceInfo.DeviceInfoModule)nativeModules[1]),
                new ExceptionsManagerModuleWrapper((ReactNative.Modules.Core.ExceptionsManagerModule)nativeModules[2]),
                new PlatformConstantsModuleWrapper((ReactNative.Modules.SystemInfo.PlatformConstantsModule)nativeModules[3]),
                new SourceCodeModuleWrapper((ReactNative.Modules.DevSupport.SourceCodeModule)nativeModules[4]),
                new TimingWrapper((ReactNative.Modules.Core.Timing)nativeModules[5]),
                new UIManagerModuleWrapper((ReactNative.UIManager.UIManagerModule)nativeModules[6]),
            };
        }

        public IReadOnlyList<IViewManager> CreateViewManagers(ReactContext reactContext)
        {
            return _reactPackage.CreateViewManagers(reactContext);
        }
        class DeviceEventManagerModuleWrapper : NativeModuleWrapperBase<ReactNative.Modules.Core.DeviceEventManagerModule>
        {
            public DeviceEventManagerModuleWrapper(ReactNative.Modules.Core.DeviceEventManagerModule nativeModule)
                : base(nativeModule)
            {
            }

            public override IReadOnlyDictionary<string, INativeMethod> Methods
            {
                get
                {
                    return new Dictionary<string, INativeMethod>
                    {
                        {
                            nameof(ReactNative.Modules.Core.DeviceEventManagerModule.invokeDefaultBackPressHandler),
                            new NativeMethod("async", (invokeCallback, args) =>
                                Module.invokeDefaultBackPressHandler(
                                )
                            )
                        },
                    };
                }
            }
        }
        class DeviceInfoModuleWrapper : NativeModuleWrapperBase<ReactNative.Modules.DeviceInfo.DeviceInfoModule>
        {
            public DeviceInfoModuleWrapper(ReactNative.Modules.DeviceInfo.DeviceInfoModule nativeModule)
                : base(nativeModule)
            {
            }

            public override IReadOnlyDictionary<string, INativeMethod> Methods
            {
                get
                {
                    return new Dictionary<string, INativeMethod>
                    {
                    };
                }
            }
        }
        class ExceptionsManagerModuleWrapper : NativeModuleWrapperBase<ReactNative.Modules.Core.ExceptionsManagerModule>
        {
            public ExceptionsManagerModuleWrapper(ReactNative.Modules.Core.ExceptionsManagerModule nativeModule)
                : base(nativeModule)
            {
            }

            public override IReadOnlyDictionary<string, INativeMethod> Methods
            {
                get
                {
                    return new Dictionary<string, INativeMethod>
                    {
                        {
                            nameof(ReactNative.Modules.Core.ExceptionsManagerModule.reportFatalException),
                            new NativeMethod("async", (invokeCallback, args) =>
                                Module.reportFatalException(
                                    args[0].ToObject<System.String>(),
                                    CastJToken<Newtonsoft.Json.Linq.JArray>(args[1]),
                                    args[2].ToObject<System.Int32>()
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Modules.Core.ExceptionsManagerModule.reportSoftException),
                            new NativeMethod("async", (invokeCallback, args) =>
                                Module.reportSoftException(
                                    args[0].ToObject<System.String>(),
                                    CastJToken<Newtonsoft.Json.Linq.JArray>(args[1]),
                                    args[2].ToObject<System.Int32>()
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Modules.Core.ExceptionsManagerModule.updateExceptionMessage),
                            new NativeMethod("async", (invokeCallback, args) =>
                                Module.updateExceptionMessage(
                                    args[0].ToObject<System.String>(),
                                    CastJToken<Newtonsoft.Json.Linq.JArray>(args[1]),
                                    args[2].ToObject<System.Int32>()
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Modules.Core.ExceptionsManagerModule.dismissRedbox),
                            new NativeMethod("async", (invokeCallback, args) =>
                                Module.dismissRedbox(
                                )
                            )
                        },
                    };
                }
            }
        }
        class PlatformConstantsModuleWrapper : NativeModuleWrapperBase<ReactNative.Modules.SystemInfo.PlatformConstantsModule>
        {
            public PlatformConstantsModuleWrapper(ReactNative.Modules.SystemInfo.PlatformConstantsModule nativeModule)
                : base(nativeModule)
            {
            }

            public override IReadOnlyDictionary<string, INativeMethod> Methods
            {
                get
                {
                    return new Dictionary<string, INativeMethod>
                    {
                    };
                }
            }
        }
        class SourceCodeModuleWrapper : NativeModuleWrapperBase<ReactNative.Modules.DevSupport.SourceCodeModule>
        {
            public SourceCodeModuleWrapper(ReactNative.Modules.DevSupport.SourceCodeModule nativeModule)
                : base(nativeModule)
            {
            }

            public override IReadOnlyDictionary<string, INativeMethod> Methods
            {
                get
                {
                    return new Dictionary<string, INativeMethod>
                    {
                        {
                            nameof(ReactNative.Modules.DevSupport.SourceCodeModule.getScriptText),
                            new NativeMethod("promise", (invokeCallback, args) =>
                                Module.getScriptText(
                                    new Promise(
                                        new Callback(args[0].ToObject<int>(), invokeCallback),
                                        new Callback(args[1].ToObject<int>(), invokeCallback)
                                    )
                                )
                            )
                        },
                    };
                }
            }
        }
        class TimingWrapper : NativeModuleWrapperBase<ReactNative.Modules.Core.Timing>
        {
            public TimingWrapper(ReactNative.Modules.Core.Timing nativeModule)
                : base(nativeModule)
            {
            }

            public override IReadOnlyDictionary<string, INativeMethod> Methods
            {
                get
                {
                    return new Dictionary<string, INativeMethod>
                    {
                        {
                            nameof(ReactNative.Modules.Core.Timing.createTimer),
                            new NativeMethod("async", (invokeCallback, args) =>
                                Module.createTimer(
                                    args[0].ToObject<System.Int32>(),
                                    args[1].ToObject<System.Int32>(),
                                    args[2].ToObject<System.Double>(),
                                    args[3].ToObject<System.Boolean>()
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Modules.Core.Timing.deleteTimer),
                            new NativeMethod("async", (invokeCallback, args) =>
                                Module.deleteTimer(
                                    args[0].ToObject<System.Int32>()
                                )
                            )
                        },
                        {
                            nameof(ReactNative.Modules.Core.Timing.setSendIdleEvents),
                            new NativeMethod("async", (invokeCallback, args) =>
                                Module.setSendIdleEvents(
                                    args[0].ToObject<System.Boolean>()
                                )
                            )
                        },
                    };
                }
            }
        }
        class UIManagerModuleWrapper : NativeModuleWrapperBase<ReactNative.UIManager.UIManagerModule>
        {
            public UIManagerModuleWrapper(ReactNative.UIManager.UIManagerModule nativeModule)
                : base(nativeModule)
            {
            }

            public override IReadOnlyDictionary<string, INativeMethod> Methods
            {
                get
                {
                    return new Dictionary<string, INativeMethod>
                    {
                        {
                            nameof(ReactNative.UIManager.UIManagerModule.removeRootView),
                            new NativeMethod("async", (invokeCallback, args) =>
                                Module.removeRootView(
                                    args[0].ToObject<System.Int32>()
                                )
                            )
                        },
                        {
                            nameof(ReactNative.UIManager.UIManagerModule.createView),
                            new NativeMethod("async", (invokeCallback, args) =>
                                Module.createView(
                                    args[0].ToObject<System.Int32>(),
                                    args[1].ToObject<System.String>(),
                                    args[2].ToObject<System.Int32>(),
                                    CastJToken<Newtonsoft.Json.Linq.JObject>(args[3])
                                )
                            )
                        },
                        {
                            nameof(ReactNative.UIManager.UIManagerModule.updateView),
                            new NativeMethod("async", (invokeCallback, args) =>
                                Module.updateView(
                                    args[0].ToObject<System.Int32>(),
                                    args[1].ToObject<System.String>(),
                                    CastJToken<Newtonsoft.Json.Linq.JObject>(args[2])
                                )
                            )
                        },
                        {
                            nameof(ReactNative.UIManager.UIManagerModule.manageChildren),
                            new NativeMethod("async", (invokeCallback, args) =>
                                Module.manageChildren(
                                    args[0].ToObject<System.Int32>(),
                                    args[1].ToObject<System.Int32[]>(),
                                    args[2].ToObject<System.Int32[]>(),
                                    args[3].ToObject<System.Int32[]>(),
                                    args[4].ToObject<System.Int32[]>(),
                                    args[5].ToObject<System.Int32[]>()
                                )
                            )
                        },
                        {
                            nameof(ReactNative.UIManager.UIManagerModule.setChildren),
                            new NativeMethod("async", (invokeCallback, args) =>
                                Module.setChildren(
                                    args[0].ToObject<System.Int32>(),
                                    args[1].ToObject<System.Int32[]>()
                                )
                            )
                        },
                        {
                            nameof(ReactNative.UIManager.UIManagerModule.replaceExistingNonRootView),
                            new NativeMethod("async", (invokeCallback, args) =>
                                Module.replaceExistingNonRootView(
                                    args[0].ToObject<System.Int32>(),
                                    args[1].ToObject<System.Int32>()
                                )
                            )
                        },
                        {
                            nameof(ReactNative.UIManager.UIManagerModule.removeSubviewsFromContainerWithID),
                            new NativeMethod("async", (invokeCallback, args) =>
                                Module.removeSubviewsFromContainerWithID(
                                    args[0].ToObject<System.Int32>()
                                )
                            )
                        },
                        {
                            nameof(ReactNative.UIManager.UIManagerModule.measure),
                            new NativeMethod("async", (invokeCallback, args) =>
                                Module.measure(
                                    args[0].ToObject<System.Int32>(),
                                    new Callback(args[1].ToObject<int>(), invokeCallback)
                                )
                            )
                        },
                        {
                            nameof(ReactNative.UIManager.UIManagerModule.measureInWindow),
                            new NativeMethod("async", (invokeCallback, args) =>
                                Module.measureInWindow(
                                    args[0].ToObject<System.Int32>(),
                                    new Callback(args[1].ToObject<int>(), invokeCallback)
                                )
                            )
                        },
                        {
                            nameof(ReactNative.UIManager.UIManagerModule.measureLayout),
                            new NativeMethod("async", (invokeCallback, args) =>
                                Module.measureLayout(
                                    args[0].ToObject<System.Int32>(),
                                    args[1].ToObject<System.Int32>(),
                                    new Callback(args[2].ToObject<int>(), invokeCallback),
                                    new Callback(args[3].ToObject<int>(), invokeCallback)
                                )
                            )
                        },
                        {
                            nameof(ReactNative.UIManager.UIManagerModule.measureLayoutRelativeToParent),
                            new NativeMethod("async", (invokeCallback, args) =>
                                Module.measureLayoutRelativeToParent(
                                    args[0].ToObject<System.Int32>(),
                                    new Callback(args[1].ToObject<int>(), invokeCallback),
                                    new Callback(args[2].ToObject<int>(), invokeCallback)
                                )
                            )
                        },
                        {
                            nameof(ReactNative.UIManager.UIManagerModule.findSubviewIn),
                            new NativeMethod("async", (invokeCallback, args) =>
                                Module.findSubviewIn(
                                    args[0].ToObject<System.Int32>(),
                                    CastJToken<Newtonsoft.Json.Linq.JArray>(args[1]),
                                    new Callback(args[2].ToObject<int>(), invokeCallback)
                                )
                            )
                        },
                        {
                            nameof(ReactNative.UIManager.UIManagerModule.setJSResponder),
                            new NativeMethod("async", (invokeCallback, args) =>
                                Module.setJSResponder(
                                    args[0].ToObject<System.Int32>(),
                                    args[1].ToObject<System.Boolean>()
                                )
                            )
                        },
                        {
                            nameof(ReactNative.UIManager.UIManagerModule.clearJSResponder),
                            new NativeMethod("async", (invokeCallback, args) =>
                                Module.clearJSResponder(
                                )
                            )
                        },
                        {
                            nameof(ReactNative.UIManager.UIManagerModule.dispatchViewManagerCommand),
                            new NativeMethod("async", (invokeCallback, args) =>
                                Module.dispatchViewManagerCommand(
                                    args[0].ToObject<System.Int32>(),
                                    args[1].ToObject<System.Int32>(),
                                    CastJToken<Newtonsoft.Json.Linq.JArray>(args[2])
                                )
                            )
                        },
                        {
                            nameof(ReactNative.UIManager.UIManagerModule.showPopupMenu),
                            new NativeMethod("async", (invokeCallback, args) =>
                                Module.showPopupMenu(
                                    args[0].ToObject<System.Int32>(),
                                    args[1].ToObject<System.String[]>(),
                                    new Callback(args[2].ToObject<int>(), invokeCallback),
                                    new Callback(args[3].ToObject<int>(), invokeCallback)
                                )
                            )
                        },
                        {
                            nameof(ReactNative.UIManager.UIManagerModule.configureNextLayoutAnimation),
                            new NativeMethod("async", (invokeCallback, args) =>
                                Module.configureNextLayoutAnimation(
                                    CastJToken<Newtonsoft.Json.Linq.JObject>(args[0]),
                                    new Callback(args[1].ToObject<int>(), invokeCallback),
                                    new Callback(args[2].ToObject<int>(), invokeCallback)
                                )
                            )
                        },
                        {
                            nameof(ReactNative.UIManager.UIManagerModule.getConstantsForViewManager),
                            new NativeMethod("sync", (invokeCallback, args) =>
                                Module.getConstantsForViewManager(
                                    args[0].ToObject<System.String>()
                                )
                            )
                        },
                        {
                            nameof(ReactNative.UIManager.UIManagerModule.getDefaultEventTypes),
                            new NativeMethod("sync", (invokeCallback, args) =>
                                Module.getDefaultEventTypes(
                                )
                            )
                        },
                    };
                }
            }
        }
    }
}
